<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DBUtility.Oracle</name>
    </assembly>
    <members>
        <member name="T:DawnXZ.DBUtility.OracleConnectionString">
            <summary>
            数据库连接字符串
            <para>Data Source=MyOracleDB;User Id=myUsername;Password=myPassword;Integrated Security=no;</para>
            </summary>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleConnectionString.ConnectionString(System.String)">
            <summary>
            数据库连接字符串
            <para>默认名称：OracleConnectionString</para>
            </summary>
            <param name="KeyName">键值名称</param>
            <returns>数据库连接字符串</returns>
        </member>
        <member name="T:DawnXZ.DBUtility.OracleHelper">
            <summary>
            The OracleHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of OracleClient.
            </summary>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.AttachParameters(System.Data.OracleClient.OracleCommand,System.Data.OracleClient.OracleParameter[])">
            <summary>
            This method is used to attach array's of OracleParameters to an OracleCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">an array of OracleParameters tho be added to command</param>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.AssignParameterValues(System.Data.OracleClient.OracleParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of OracleParameters.
            </summary>
            <param name="commandParameters">array of OracleParameters to be assigned values</param>
            <param name="parameterValues">array of objects holding the values to be assigned</param>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.PrepareCommand(System.Data.OracleClient.OracleCommand,System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command.
            </summary>
            <param name="command">the OracleCommand to be prepared</param>
            <param name="connection">a valid OracleConnection, on which to execute this command</param>
            <param name="transaction">a valid OracleTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OracleParameters to be associated with the command or 'null' if no parameters are required</param>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns no resultset and takes no parameters) against the provided OracleConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns no resultset) against the specified OracleConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns no resultset) against the specified OracleConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns no resultset and takes no parameters) against the provided OracleTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns no resultset) against the specified OracleTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns no resultset) against the specified 
            OracleTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a resultset) against the database specified in 
            the conneciton string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a resultset and takes no parameters) against the provided OracleConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a resultset) against the specified OracleConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a resultset) against the specified OracleConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a resultset and takes no parameters) against the provided OracleTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a resultset) against the specified OracleTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteDataset(System.Data.OracleClient.OracleTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a resultset) against the specified 
            OracleTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="T:DawnXZ.DBUtility.OracleHelper.OracleConnectionOwnership">
            <summary>
            this enum is used to indicate weather the connection was provided by the caller, or created by OracleHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:DawnXZ.DBUtility.OracleHelper.OracleConnectionOwnership.Internal">
            <summary>Connection is owned and managed by OracleHelper</summary>
        </member>
        <member name="F:DawnXZ.DBUtility.OracleHelper.OracleConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[],DawnXZ.DBUtility.OracleHelper.OracleConnectionOwnership)">
            <summary>
            Create and prepare an OracleCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">a valid OracleConnection, on which to execute this command</param>
            <param name="transaction">a valid OracleTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OracleParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">indicates whether the connection parameter was provided by the caller, or created by OracleHelper</param>
            <returns>OracleDataReader containing the results of the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OracleDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a resultset and takes no parameters) against the provided OracleConnection. 
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a resultset) against the specified OracleConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a resultset) against the specified OracleConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OracleDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a resultset and takes no parameters) against the provided OracleTransaction. 
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a resultset) against the specified OracleTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              OracleDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteReader(System.Data.OracleClient.OracleTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a resultset) against the specified
            OracleTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OracleDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-Oracle command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-Oracle command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a 1x1 resultset) against the database specified in 
            the conneciton string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a 1x1 resultset and takes no parameters) against the provided OracleConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-Oracle command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a 1x1 resultset) against the specified OracleConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a 1x1 resultset) against the specified OracleConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OracleCommand (that returns a 1x1 resultset and takes no parameters) against the provided OracleTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns a 1x1 resultset) against the specified OracleTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OracleCommand (that returns a 1x1 resultset) against the specified
            OracleTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="T:DawnXZ.DBUtility.OracleHelperParameterCache">
            <summary>
            OracleHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelperParameterCache.DiscoverSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            resolve at run-time the appropriate set of OracleParameters for a stored procedure
            </summary>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">whether or not to include ther return value parameter</param>
            <returns></returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OracleParameters to be cached</param>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an array of OracleParameters</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of OracleParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <returns>an array of OracleParameters</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.OracleHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of OracleParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for an OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">a bool value indicating whether the return value parameter should be included in the results</param>
            <returns>an array of OracleParameters</returns>
        </member>
    </members>
</doc>
