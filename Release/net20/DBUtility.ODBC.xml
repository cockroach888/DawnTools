<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DBUtility.ODBC</name>
    </assembly>
    <members>
        <member name="T:DawnXZ.DBUtility.ODBCConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCConnectionString.ConnectionString(System.Boolean,System.String,System.String,System.String)">
            <summary>
            ODBC 连接字符串
            <para>调用时请对此方法特别调用</para>
            </summary>
            <param name="readonlyflg">是否只读</param>
            <param name="OdbcName">ODBC 名称</param>
            <param name="OdbcUid">ODBC 用户名</param>
            <param name="OdbcPwd">ODBC 密码</param>
            <returns>连接字符串</returns>
        </member>
        <member name="T:DawnXZ.DBUtility.ODBCHelper">
            <summary>
            ODBC数据操作辅助类
            </summary>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.AttachParameters(System.Data.Odbc.OdbcCommand,System.Data.Odbc.OdbcParameter[])">
            <summary>
            This method is used to attach array of OdbcParameters to a OdbcCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of OdbcParameters to be added to command</param>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.AssignParameterValues(System.Data.Odbc.OdbcParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of OdbcParameters
            </summary>
            <param name="commandParameters">Array of OdbcParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.AssignParameterValues(System.Data.Odbc.OdbcParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of OdbcParameters
            </summary>
            <param name="commandParameters">Array of OdbcParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.PrepareCommand(System.Data.Odbc.OdbcCommand,System.Data.Odbc.OdbcConnection,System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The OdbcCommand to be prepared</param>
            <param name="connection">A valid OdbcConnection, on which to execute this command</param>
            <param name="transaction">A valid OdbcTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of OdbcParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteDataset(System.String,System.String)">
            <summary>
            Execute a OdbcCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a OdbcConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a OdbcConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteDataset(System.String,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a OdbcConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a OdbcConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a OdbcConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteDataset(System.Data.Odbc.OdbcConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand (that returns a resultset and takes no parameters) against the provided OdbcConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid OdbcConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteDataset(System.Data.Odbc.OdbcConnection,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns a resultset) against the specified OdbcConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid OdbcConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteDataset(System.Data.Odbc.OdbcConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns a resultset) against the specified OdbcConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid OdbcConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteDataset(System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand (that returns a resultset and takes no parameters) against the provided OdbcTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid OdbcTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteDataset(System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns a resultset) against the specified OdbcTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid OdbcTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteDataset(System.Data.Odbc.OdbcTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns a resultset) against the specified 
            OdbcTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid OdbcTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.String)">
            <summary>
             Updated By Rickie. Mar, 10, 2004
            </summary>
            <param name="connectionString"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="mappingName"></param>
            <returns></returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a OdbcCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a OdbcConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a OdbcConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a OdbcConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.FillDataset(System.Data.Odbc.OdbcConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a OdbcCommand (that returns a resultset and takes no parameters) against the provided OdbcConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid OdbcConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.FillDataset(System.Data.Odbc.OdbcConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns a resultset) against the specified OdbcConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid OdbcConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.FillDataset(System.Data.Odbc.OdbcConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns a resultset) against the specified OdbcConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid OdbcConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.FillDataset(System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a OdbcCommand (that returns a resultset and takes no parameters) against the provided OdbcTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid OdbcTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.FillDataset(System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns a resultset) against the specified OdbcTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid OdbcTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.FillDataset(System.Data.Odbc.OdbcTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns a resultset) against the specified 
            OdbcTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid OdbcTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.FillDataset(System.Data.Odbc.OdbcConnection,System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.Odbc.OdbcParameter[])">
            <summary>
            Private helper method that execute a OdbcCommand (that returns a resultset) against the specified OdbcTransaction and OdbcConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid OdbcConnection</param>
            <param name="transaction">A valid OdbcTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.UpdateDataset(System.Data.Odbc.OdbcCommand,System.Data.Odbc.OdbcCommand,System.Data.Odbc.OdbcCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="T:DawnXZ.DBUtility.ODBCHelper.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="F:DawnXZ.DBUtility.ODBCHelper.SqlHelperParameterCache.paramCache">
            <summary>
            Hashtable to store cached parameters
            </summary>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.Odbc.OdbcConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of OdbcParameters for a stored procedure
            </summary>
            <param name="connection">A valid OdbcConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.SqlHelperParameterCache.CloneParameters(System.Data.Odbc.OdbcParameter[])">
            <summary>
            Deep copy of cached OdbcParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a OdbcConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a OdbcConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of OdbcParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a OdbcConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of OdbcParameters</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of OdbcParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a OdbcConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of OdbcParameters</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.SqlHelperParameterCache.GetSpParameterSet(System.Data.Odbc.OdbcConnection,System.String)">
            <summary>
            Retrieves the set of OdbcParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid OdbcConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of OdbcParameters</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.SqlHelperParameterCache.GetSpParameterSet(System.Data.Odbc.OdbcConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of OdbcParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid OdbcConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of OdbcParameters</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.Odbc.OdbcConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of OdbcParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid OdbcConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of OdbcParameters</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteNonQuery(System.String,System.String)">
            <summary>
            Execute a OdbcCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="cmdType">the CommandType (stored procedure, text, etc.)</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteNonQuery(System.String,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="cmdType">the CommandType (stored procedure, text, etc.)</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteNonQuery(System.Data.Odbc.OdbcConnection,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns no resultset) against an existing database connection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connection">an existing database connection</param>
            <param name="cmdType">the CommandType (stored procedure, text, etc.)</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteNonQuery(System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns no resultset) using an existing SQL Transaction 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="trans">an existing sql transaction</param>
            <param name="cmdType">the CommandType (stored procedure, text, etc.)</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteReader(System.String,System.String)">
            <summary>
            Execute a OdbcCommand that returns a resultset against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader r = ExecuteReader(connString, CommandType.StoredProcedure, "PublishOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the results</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand that returns a resultset against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader r = ExecuteReader(connString, CommandType.StoredProcedure, "PublishOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="cmdType">the CommandType (stored procedure, text, etc.)</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the results</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteReader(System.String,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand that returns a resultset against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader r = ExecuteReader(connString, CommandType.StoredProcedure, "PublishOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the results</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand that returns a resultset against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader r = ExecuteReader(connString, CommandType.StoredProcedure, "PublishOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="cmdType">the CommandType (stored procedure, text, etc.)</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the results</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteScalar(System.String,System.String)">
            <summary>
            Execute a OdbcCommand that returns the first column of the first record against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand that returns the first column of the first record against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="cmdType">the CommandType (stored procedure, text, etc.)</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteScalar(System.String,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand that returns the first column of the first record against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand that returns the first column of the first record against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="cmdType">the CommandType (stored procedure, text, etc.)</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.ExecuteScalar(System.Data.Odbc.OdbcConnection,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand that returns the first column of the first record against an existing database connection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connection">an existing database connection</param>
            <param name="cmdType">the CommandType (stored procedure, text, etc.)</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.CacheParameters(System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="cacheKey">Key to the parameter cache</param>
            <param name="commandParameters">an array of SqlParamters to be cached</param>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.GetCachedParameters(System.String)">
            <summary>
            Retrieve cached parameters
            </summary>
            <param name="cacheKey">key used to lookup parameters</param>
            <returns>Cached SqlParamters array</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.ODBCHelper.PrepareCommand(System.Data.Odbc.OdbcCommand,System.Data.Odbc.OdbcConnection,System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Prepare a command for execution
            </summary>
            <param name="cmd">OdbcCommand object</param>
            <param name="conn">OdbcConnection object</param>
            <param name="trans">OdbcTransaction object</param>
            <param name="cmdType">Cmd type e.g. stored procedure or text</param>
            <param name="cmdText">Command text, e.g. Select * from Products</param>
            <param name="cmdParms">OdbcParameters to use in the command</param>
        </member>
    </members>
</doc>
