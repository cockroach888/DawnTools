<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DBUtility.Sqlce</name>
    </assembly>
    <members>
        <member name="T:DawnXZ.DBUtility.SqlceConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlceConnectionString.ConnectionString(System.String)">
            <summary>
            Sql Server SDF 连接字符串
            </summary>
            <param name="sdfPath">SDF 文件路径</param>
            <returns>连接字符串</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlceConnectionString.ConnectionString(System.String,System.String)">
            <summary>
            Sql Server SDF 连接字符串
            </summary>
            <param name="sdfPath">SDF 文件路径</param>
            <param name="sdfPwd">SDF 密码</param>
            <returns>连接字符串</returns>
        </member>
        <member name="T:DawnXZ.DBUtility.SqlCeHelper">
            <summary>
            The SqlCeHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlCe.
            </summary>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.#ctor">
            <summary>
            Since this class provides only static methods, make the default constructor private to prevent 
            instances from being created with "new SqlCeHelper()".
            </summary>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.AttachParameters(System.Data.SqlServerCe.SqlCeCommand,System.Data.SqlServerCe.SqlCeParameter[])">
            <summary>
            This method is used to attach array of SqlCeParameter to a SqlCeCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlCeParameter to be added to command</param>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.PrepareCommand(System.Data.SqlServerCe.SqlCeCommand,System.Data.SqlServerCe.SqlCeConnection,System.Data.SqlServerCe.SqlCeTransaction,System.Data.CommandType,System.String,System.Data.SqlServerCe.SqlCeParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command.
            </summary>
            <param name="command">The SqlCeCommand to be prepared</param>
            <param name="connection">A valid SqlCeConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlCeTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlCeParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteNonQuery(System.String,System.String)">
            <summary>
            Execute a SqlCeCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.Text, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlCeConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCeCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.Text, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlCeConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteNonQuery(System.String,System.String,System.Data.SqlServerCe.SqlCeParameter[])">
            <summary>
            Execute a SqlCeCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.Text, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlCeConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlCeParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlServerCe.SqlCeParameter[])">
            <summary>
            Execute a SqlCeCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.Text, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlCeConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlCeParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteNonQuery(System.Data.SqlServerCe.SqlCeConnection,System.Data.CommandType,System.String,System.Data.SqlServerCe.SqlCeParameter[])">
            <summary>
            Execute a SqlCeCommand (that returns no resultset) against the specified SqlCeConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.Text, "PublishOrders", new SqlCeParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlCeConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlCeParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteNonQuery(System.Data.SqlServerCe.SqlCeTransaction,System.String)">
            <summary>
            Execute a SqlCeCommand (that returns no resultset and takes no parameters) against the provided SqlCeTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.Text, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteNonQuery(System.Data.SqlServerCe.SqlCeTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCeCommand (that returns no resultset and takes no parameters) against the provided SqlCeTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.Text, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteNonQuery(System.Data.SqlServerCe.SqlCeTransaction,System.Data.CommandType,System.String,System.Data.SqlServerCe.SqlCeParameter[])">
            <summary>
            Execute a SqlCeCommand (that returns no resultset) against the specified SqlCeTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.Text, "GetOrders", new SqlCeParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlCeTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlCeParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteDataset(System.String,System.String)">
            <summary>
            Execute a SqlCeCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlCeConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCeCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlCeConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteDataset(System.String,System.String,System.Data.SqlServerCe.SqlCeParameter[])">
            <summary>
            Execute a SqlCeCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlCeParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlCeConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlCeParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlServerCe.SqlCeParameter[])">
            <summary>
            Execute a SqlCeCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlCeParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlCeConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlCeParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteDataset(System.Data.SqlServerCe.SqlCeConnection,System.Data.CommandType,System.String,System.Data.SqlServerCe.SqlCeParameter[])">
            <summary>
            Execute a SqlCeCommand (that returns a resultset) against the specified SqlCeConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlCeParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlCeConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlCeParameter used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteDataset(System.Data.SqlServerCe.SqlCeTransaction,System.String)">
            <summary>
            Execute a SqlCeCommand (that returns a resultset and takes no parameters) against the provided SqlCeTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.Text, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlCeTransaction</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteDataset(System.Data.SqlServerCe.SqlCeTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCeCommand (that returns a resultset and takes no parameters) against the provided SqlCeTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.Text, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlCeTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteDataset(System.Data.SqlServerCe.SqlCeTransaction,System.Data.CommandType,System.String,System.Data.SqlServerCe.SqlCeParameter[])">
            <summary>
            Execute a SqlCeCommand (that returns a resultset) against the specified SqlCeTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.Text, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlCeTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlCeParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="T:DawnXZ.DBUtility.SqlCeHelper.SqlCeConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlCeHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:DawnXZ.DBUtility.SqlCeHelper.SqlCeConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlCeHelper</summary>
        </member>
        <member name="F:DawnXZ.DBUtility.SqlCeHelper.SqlCeConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteReader(System.String,System.String)">
            <summary>
            Execute a SqlCeCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlCeDataReader dr = ExecuteReader(connString, CommandType.Text, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlCeConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlCeDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCeCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlCeDataReader dr = ExecuteReader(connString, CommandType.Text, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlCeConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlCeDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteReader(System.String,System.String,System.Data.SqlServerCe.SqlCeParameter[])">
            <summary>
            Execute a SqlCeCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlCeDataReader dr = ExecuteReader(connString, CommandType.Test, "GetOrders", new SqlCeParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlCeConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlCeParamters used to execute the command</param>
            <returns>A SqlCeDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlServerCe.SqlCeParameter[])">
            <summary>
            Execute a SqlCeCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlCeDataReader dr = ExecuteReader(connString, CommandType.Test, "GetOrders", new SqlCeParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlCeConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlCeParamters used to execute the command</param>
            <returns>A SqlCeDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteReader(System.Data.SqlServerCe.SqlCeConnection,System.Data.SqlServerCe.SqlCeTransaction,System.Data.CommandType,System.String,System.Data.SqlServerCe.SqlCeParameter[],DawnXZ.DBUtility.SqlCeHelper.SqlCeConnectionOwnership)">
            <summary>
            Create and prepare a SqlCeCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlCeConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlCeTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlCeParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlCeHelper</param>
            <returns>SqlCeDataReader containing the results of the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteReader(System.Data.SqlServerCe.SqlCeTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCeCommand (that returns a resultset and takes no parameters) against the provided SqlCeTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlCeDataReader dr = ExecuteReader(trans, CommandType.Text, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlCeTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlCeDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteReader(System.Data.SqlServerCe.SqlCeTransaction,System.Data.CommandType,System.String,System.Data.SqlServerCe.SqlCeParameter[])">
            <summary>
            Execute a SqlCeCommand (that returns a resultset) against the specified SqlCeTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlCeDataReader dr = ExecuteReader(trans, CommandType.Text, "GetOrders", new SqlCeParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlCeTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlCeParamters used to execute the command</param>
            <returns>A SqlCeDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteScalar(System.String,System.String)">
            <summary>
            Execute a SqlCeCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.Text, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlCeConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCeCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.Text, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlCeConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteScalar(System.String,System.String,System.Data.SqlServerCe.SqlCeParameter[])">
            <summary>
            Execute a SqlCeCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.Text, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlCeConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlServerCe.SqlCeParameter[])">
            <summary>
            Execute a SqlCeCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.Text, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlCeConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteScalar(System.Data.SqlServerCe.SqlCeConnection,System.Data.CommandType,System.String,System.Data.SqlServerCe.SqlCeParameter[])">
            <summary>
            Execute a SqlCeCommand (that returns a 1x1 resultset) against the specified SqlCeConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.Text, "GetOrderCount", new SqlCeParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlCeConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlCeParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteScalar(System.Data.SqlServerCe.SqlCeTransaction,System.String)">
            <summary>
            Execute a SqlCeCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlCeTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.Text, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlCeTransaction</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteScalar(System.Data.SqlServerCe.SqlCeTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCeCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlCeTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.Text, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlCeTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExecuteScalar(System.Data.SqlServerCe.SqlCeTransaction,System.Data.CommandType,System.String,System.Data.SqlServerCe.SqlCeParameter[])">
            <summary>
            Execute a SqlCeCommand (that returns a 1x1 resultset) against the specified SqlCeTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.Text, "GetOrderCount", new SqlCeParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlCeTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlCeParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExistsOfTable(System.String,System.String)">
            <summary>
            判断数据表是否存在
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="tableName">表名称</param>
            <returns>true / false</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.SqlCeHelper.ExistsOfColumn(System.String,System.String,System.String)">
            <summary>
            判断数据字段是否存在
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="tableName">表名称</param>
            <param name="columnName">列名称</param>
            <returns>true / false</returns>
        </member>
    </members>
</doc>
