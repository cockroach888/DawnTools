<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DBUtility.MongoDB</name>
    </assembly>
    <members>
        <member name="T:DawnXZ.DBUtility.MongoConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoConnectionString.ConnectionString(System.String)">
            <summary>
            MongoDB连接字符串
            </summary>
            <param name="keyName">键值名称</param>
            <para>默认值：MongoConnectionString</para>
            <returns>数据库连接字符串</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoConnectionString.DatabaseName(System.String)">
            <summary>
            MongoDB数据库名称
            <para>调用时请对此方法特别调用</para>
            <para>默认值：MongoDatabaseName</para>
            </summary>
            <param name="keyName">键值名称</param>
            <returns>数据库名称</returns>
        </member>
        <member name="F:DawnXZ.DBUtility.MongoConnectionString.ParamOne">
            <summary>
            连接参数 One
            </summary>
        </member>
        <member name="F:DawnXZ.DBUtility.MongoConnectionString.ParamTwo">
            <summary>
            连接参数 Two
            </summary>
        </member>
        <member name="T:DawnXZ.DBUtility.MongoAttribute">
            <summary>
            Mongodb数据库的字段特性  主要是设置索引之用
            </summary>
        </member>
        <member name="P:DawnXZ.DBUtility.MongoAttribute.IsIndex">
            <summary>
            是否是索引
            </summary>
        </member>
        <member name="P:DawnXZ.DBUtility.MongoAttribute.Unique">
            <summary>
            是否是唯一的
            <para>默认flase</para>
            </summary>
        </member>
        <member name="P:DawnXZ.DBUtility.MongoAttribute.Ascending">
            <summary>
            是否是升序
            <para>默认true</para>
            </summary>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="_isIndex">是否为索引</param>
        </member>
        <member name="T:DawnXZ.DBUtility.MongoDBHandler">
            <summary>
            MongoDB配置处理器
            </summary>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHandler.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="dbName">MongoDB 数据库名称</param>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHandler.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="dbName">MongoDB 数据库名称</param>
            <returns>MongoDatabase 实例对象</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHandler.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="host">MongoDB 数据库连接主机地址</param>
            <param name="port">MongoDB 数据库连接端口号</param>
            <param name="timeout">MongoDB 数据库连接超时时间</param>
            <param name="dbName">MongoDB 数据库名称</param>
            <returns>MongoDatabase 实例对象</returns>
        </member>
        <member name="P:DawnXZ.DBUtility.MongoDBHandler.FClient">
            <summary>
            MongoDB 客户端对象
            </summary>
        </member>
        <member name="P:DawnXZ.DBUtility.MongoDBHandler.FDatabase">
            <summary>
            MongoDB 数据库对象
            </summary>
        </member>
        <member name="P:DawnXZ.DBUtility.MongoDBHandler.MongoConnectionHost">
            <summary>
            MongoDB 数据库连接主机地址
            </summary>
        </member>
        <member name="P:DawnXZ.DBUtility.MongoDBHandler.MongoConnectionPort">
            <summary>
            MongoDB 数据库连接端口号
            </summary>
        </member>
        <member name="P:DawnXZ.DBUtility.MongoDBHandler.MongoConnectionTimeout">
            <summary>
            MongoDB 数据库连接超时时间
            </summary>
        </member>
        <member name="P:DawnXZ.DBUtility.MongoDBHandler.MongoDatabaseName">
            <summary>
            MongoDB 数据库名称
            </summary>
        </member>
        <member name="T:DawnXZ.DBUtility.MongoDBHelper`1">
            <summary>
            The MongoDBHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of MongoDB.
            </summary>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelper`1.Insert``1(System.String,System.String,``0)">
            <summary>
            数据添加
            <para>单个添加</para>
            <remarks>数据库不存在创建数据库</remarks>
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="connectionString">数据库连接字符串</param>
            <param name="databaseName">数据库名称</param>
            <param name="entity">实体对象</param>
            <returns>安全模式的结果</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelper`1.Insert``1(System.String,System.String,System.String,``0)">
            <summary>
            数据添加
            <para>单个添加</para>
            <remarks>数据库不存在创建数据库</remarks>
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="connectionString">数据库连接字符串</param>
            <param name="databaseName">数据库名称</param>
            <param name="collectionName">集合名称</param>
            <param name="entity">实体对象</param>
            <returns>安全模式的结果</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelper`1.Insert``1(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            数据添加
            <para>多个添加</para>
            <remarks>数据库不存在创建数据库</remarks>
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="connectionString">数据库连接字符串</param>
            <param name="databaseName">数据库名称</param>
            <param name="collectionName">集合名称</param>
            <param name="entitys">实体对象集合</param>
            <returns>安全模式的结果集合</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelper`1.Update``1(System.String,System.String,System.String,``0)">
            <summary>
            数据更新
            <para>实体更新</para>
            <remarks>数据库不存在创建数据库</remarks>
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="connectionString">数据库连接字符串</param>
            <param name="databaseName">数据库名称</param>
            <param name="collectionName">集合名称</param>
            <param name="entity">实体对象</param>
            <returns>安全模式的结果</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelper`1.Update``1(System.String,System.String,System.String,MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoUpdate)">
            <summary>
            数据更新
            <para>查询更新</para>
            <remarks>数据库不存在创建数据库</remarks>
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="connectionString">数据库连接字符串</param>
            <param name="databaseName">数据库名称</param>
            <param name="collectionName">集合名称</param>
            <param name="query">
            查询条件
            <para>调用示例：</para>
            <para>　　Query.Matches("Title", "感冒")</para>
            <para>　　Query.EQ("Title", "感冒")</para>
            <para>　　Query.And(Query.Matches("Title", "感冒"),Query.EQ("Author", "yanc"))</para>
            </param>
            <param name="update">
            更新设置
            <para>调用示例：</para>
            <para>　　Update.Set("Title", "yanc")</para>
            <para>　　Update.Set("Title", "yanc").Set("Author", "yanc2")</para>
            </param>
            <returns>安全模式的结果集合</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelper`1.Delete(System.String,System.String,System.String,System.String)">
            <summary>
            数据删除
            <remarks>数据库不存在创建数据库</remarks>
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="databaseName">数据库名称</param>
            <param name="collectionName">集合名称</param>
            <param name="_id">内置系统编号</param>
            <returns>安全模式的结果</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelper`1.Delete(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            数据删除
            <remarks>数据库不存在创建数据库</remarks>
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="databaseName">数据库名称</param>
            <param name="collectionName">集合名称</param>
            <param name="keyName">键名称</param>
            <param name="keyValue">键值</param>
            <returns>安全模式的结果</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelper`1.DeleteAll(System.String,System.String,System.String,MongoDB.Driver.IMongoQuery)">
            <summary>
            数据删除
            <remarks>数据库不存在创建数据库</remarks>
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="databaseName">数据库名称</param>
            <param name="collectionName">集合名称</param>
            <param name="query">
            删除条件
            <para>调用示例：</para>
            <para>　　Query.Matches("Title", "感冒")</para>
            <para>　　Query.EQ("Title", "感冒")</para>
            <para>　　Query.And(Query.Matches("Title", "感冒"),Query.EQ("Author", "yanc"))</para>
            </param>
            <returns>安全模式的结果</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelper`1.Select``1(System.String,System.String,System.String,System.String)">
            <summary>
            单实体数据查询
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="connectionString">数据库连接字符串</param>
            <param name="databaseName">数据库名称</param>
            <param name="collectionName">集合名称</param>
            <param name="_id">系统内置编号</param>
            <returns>泛型对象集合信息</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelper`1.Select``1(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            单实体数据查询
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="connectionString">数据库连接字符串</param>
            <param name="databaseName">数据库名称</param>
            <param name="collectionName">集合名称</param>
            <param name="keyName">键名称</param>
            <param name="keyValue">键值</param>
            <returns>泛型对象集合信息</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelper`1.Select``1(System.String,System.String,System.String,MongoDB.Driver.IMongoQuery)">
            <summary>
            单实体数据查询
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="connectionString">数据库连接字符串</param>
            <param name="databaseName">数据库名称</param>
            <param name="collectionName">集合名称</param>
            <param name="query">
            查询条件
            <para>调用示例：</para>
            <para>　　Query.Matches("Title", "感冒")</para>
            <para>　　Query.EQ("Title", "感冒")</para>
            <para>　　Query.And(Query.Matches("Title", "感冒"),Query.EQ("Author", "yanc"))</para>
            <para></para>
            </param>
            <returns>泛型对象集合信息</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelper`1.Select``1(System.String,System.String,System.String)">
            <summary>
            实体集合数据查询
            <para>如果集合为大数据时，请慎用。</para>
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="connectionString">数据库连接字符串</param>
            <param name="databaseName">数据库名称</param>
            <param name="collectionName">集合名称</param>
            <returns>泛型对象实体集合</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelper`1.Select``1(System.String,System.String,System.String,System.Int32,System.Int32,MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoSortBy,System.String[])">
            <summary>
            实体集合数据查询
            <para>Skip模式分页查询</para>
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="connectionString">数据库连接字符串</param>
            <param name="databaseName">数据库名称</param>
            <param name="collectionName">集合名称</param>
            <param name="pageIndex">分页索引</param>
            <param name="pageSize">分页大小</param>
            <param name="query">
            查询条件
            <para>调用示例：</para>
            <para>　　Query.Matches("Title", "感冒")</para>
            <para>　　Query.EQ("Title", "感冒")</para>
            <para>　　Query.And(Query.Matches("Title", "感冒"),Query.EQ("Author", "yanc"))</para>
            </param>
            <param name="sortBy">
            排序条件
            <para>调用示例：</para>
            <para>　　SortBy.Descending("Title")</para>
            <para>　　SortBy.Descending("Title").Ascending("Author")</para>
            </param>
            <param name="fields">
            返回字段设置
            <para>调用示例：</para>
            <para>　　"Title"</para>
            <para>　　new string[] { "Title", "Author" }</para>
            </param>
            <returns>泛型对象实体集合</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelper`1.Index(System.String,System.String,System.String,System.String[])">
            <summary>
            索引建立
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="databaseName">数据库名称</param>
            <param name="collectionName">集合名称</param>
            <param name="keyNames">需要建立索引的字段</param>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelper`1.Select``1(System.String,System.String,System.String,MongoDB.Driver.IMongoQuery,System.String,System.Object,System.Int32,System.Int32,System.String[])">
            <summary>
            分页查询 指定索引最后项-PageSize模式 
            </summary>
            <typeparam name="T">所需查询的数据的实体类型</typeparam>
            <param name="connectionString">数据库连接字符串</param>
            <param name="databaseName">数据库名称</param>
            <param name="collectionName">集合名称</param>
            <param name="query">查询的条件 没有可以为null</param>
            <param name="indexName">索引名称</param>
            <param name="lastKeyValue">最后索引的值</param>
            <param name="pageSize">分页大小</param>
            <param name="sortType">排序类型 1升序 -1降序 仅仅针对该索引</param>
            <param name="fields">字段设置</param>
            <returns>返回一个List列表数据</returns>
        </member>
        <member name="T:DawnXZ.DBUtility.MongoDBHelperAt">
            <summary>
            The MongoDBHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of MongoDB.
            </summary>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.#ctor(DawnXZ.DBUtility.MongoDBHandler)">
            <summary>
            构造函数
            </summary>
            <param name="handler">MongoDBHandler</param>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.#ctor(MongoDB.Driver.MongoDatabase)">
            <summary>
            构造函数
            </summary>
            <param name="db">MongoDatabase</param>
        </member>
        <member name="F:DawnXZ.DBUtility.MongoDBHelperAt._db">
            <summary>
            数据库的实例
            </summary>
        </member>
        <member name="F:DawnXZ.DBUtility.MongoDBHelperAt.OBJECTID_KEY">
            <summary>
            ObjectId的键
            </summary>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.Insert``1(``0)">
            <summary>
            将数据插入进数据库
            </summary>
            <typeparam name="T">需要插入数据的类型</typeparam>
            <param name="t">需要插入的具体实体</param>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.Insert``1(``0,System.String)">
            <summary>
            将数据插入进数据库
            </summary>
            <typeparam name="T">需要插入数据库的实体类型</typeparam>
            <param name="t">需要插入数据库的具体实体</param>
            <param name="collectionName">指定插入的集合</param>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.Insert``1(System.Collections.Generic.List{``0})">
            <summary>
            批量插入数据
            </summary>
            <typeparam name="T">需要插入数据库的实体类型</typeparam>
            <param name="list">需要插入数据的列表</param>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.Insert``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            批量插入数据
            </summary>
            <typeparam name="T">需要插入数据库的实体类型</typeparam>
            <param name="list">需要插入数据的列表</param>
            <param name="collectionName">指定要插入的集合</param>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.Update``1(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoUpdate,System.String)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T">更新的数据 所属的类型</typeparam>
            <param name="query">更新数据的查询</param>
            <param name="update">需要更新的文档</param>
            <param name="collectionName">指定更新集合的名称</param>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.Update``1(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoUpdate)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T">更新的数据 所属的类型</typeparam>
            <param name="query">更新数据的查询</param>
            <param name="update">需要更新的文档</param>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.Remove``1(MongoDB.Driver.IMongoQuery,System.String)">
            <summary>
            移除指定的数据
            </summary>
            <typeparam name="T">移除的数据类型</typeparam>
            <param name="query">移除的数据条件</param>
            <param name="collectionName">指定的集合名词</param>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.Remove``1(MongoDB.Driver.IMongoQuery)">
            <summary>
            移除指定的数据
            </summary>
            <typeparam name="T">移除的数据类型</typeparam>
            <param name="query">移除的数据条件</param>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.ReomveAll``1">
            <summary>
            移除实体里面所有的数据
            </summary>
            <typeparam name="T">移除的数据类型</typeparam>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.RemoveAll``1(System.String)">
            <summary>
            移除实体里面所有的数据
            </summary>
            <typeparam name="T">移除的数据类型</typeparam>
            <param name="collectionName">指定的集合名称</param>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.FindAll``1(System.String)">
            <summary>
            查询一个集合中的所有数据
            </summary>
            <typeparam name="T">该集合数据的所属类型</typeparam>
            <param name="collectionName">指定集合的名称</param>
            <returns>返回一个List列表</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.FindAll``1">
            <summary>
            查询一个集合中的所有数据 其集合的名称为T的名称
            </summary>
            <typeparam name="T">该集合数据的所属类型</typeparam>
            <returns>返回一个List列表</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.FindOne``1(MongoDB.Driver.IMongoQuery,System.String)">
            <summary>
            查询一条记录
            </summary>
            <typeparam name="T">该数据所属的类型</typeparam>
            <param name="query">查询的条件 可以为空</param>
            <param name="collectionName">去指定查询的集合</param>
            <returns>返回一个实体类型</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.FindOne``1(System.String)">
            <summary>
            查询一条记录
            </summary>
            <typeparam name="T">该数据所属的类型</typeparam>
            <param name="collectionName">去指定查询的集合</param>
            <returns>返回一个实体类型</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.FindOne``1">
            <summary>
            查询一条记录
            </summary>
            <typeparam name="T">该数据所属的类型</typeparam>
            <returns>返回一个实体类型</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.FindOne``1(MongoDB.Driver.IMongoQuery)">
            <summary>
            查询一条记录
            </summary>
            <typeparam name="T">该数据所属的类型</typeparam>
            <param name="query">查询的条件 可以为空</param>
            <returns>返回一个实体类型</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.Find``1(MongoDB.Driver.IMongoQuery,System.String)">
            <summary>
            根据指定条件查询集合中的数据
            </summary>
            <typeparam name="T">该集合数据的所属类型</typeparam>
            <param name="query">指定的查询条件 比如Query.And(Query.EQ("username","admin"),Query.EQ("password":"admin"))</param>
            <param name="collectionName">指定的集合的名称</param>
            <returns>返回一个List列表</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.Find``1(MongoDB.Driver.IMongoQuery)">
            <summary>
            根据指定条件查询集合中的数据
            </summary>
            <typeparam name="T">该集合数据的所属类型</typeparam>
            <param name="query">指定的查询条件 比如Query.And(Query.EQ("username","admin"),Query.EQ("password":"admin"))</param>
            <returns>返回一个List列表</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.Find``1(MongoDB.Driver.IMongoQuery,System.Int32,System.Int32,MongoDB.Driver.SortByDocument,System.String)">
            <summary>
            分页查询 PageIndex和PageSize模式  在页数PageIndex大的情况下 效率明显变低
            </summary>
            <typeparam name="T">所需查询的数据的实体类型</typeparam>
            <param name="query">查询的条件</param>
            <param name="pageIndex">当前的页数</param>
            <param name="pageSize">当前的尺寸</param>
            <param name="sortBy">排序方式</param>
            <param name="collectionName">集合名称</param>
            <returns>返回List列表</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.Find``1(MongoDB.Driver.IMongoQuery,System.Int32,System.Int32,MongoDB.Driver.SortByDocument)">
            <summary>
            分页查询 PageIndex和PageSize模式  在页数PageIndex大的情况下 效率明显变低
            </summary>
            <typeparam name="T">所需查询的数据的实体类型</typeparam>
            <param name="query">查询的条件</param>
            <param name="pageIndex">当前的页数</param>
            <param name="pageSize">当前的尺寸</param>
            <param name="sortBy">排序方式</param>
            <returns>返回List列表</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.Find``1(MongoDB.Driver.IMongoQuery,System.String,System.Object,System.Int32,System.Int32,System.String)">
            <summary>
            分页查询 指定索引最后项-PageSize模式 
            </summary>
            <typeparam name="T">所需查询的数据的实体类型</typeparam>
            <param name="query">查询的条件 没有可以为null</param>
            <param name="indexName">索引名称</param>
            <param name="lastKeyValue">最后索引的值</param>
            <param name="pageSize">分页的尺寸</param>
            <param name="sortType">排序类型 1升序 -1降序 仅仅针对该索引</param>
            <param name="collectionName">指定的集合名称</param>
            <returns>返回一个List列表数据</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.Find``1(MongoDB.Driver.IMongoQuery,System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            分页查询 指定索引最后项-PageSize模式 
            </summary>
            <typeparam name="T">所需查询的数据的实体类型</typeparam>
            <param name="query">查询的条件 没有可以为null</param>
            <param name="indexName">索引名称</param>
            <param name="lastKeyValue">最后索引的值</param>
            <param name="pageSize">分页的尺寸</param>
            <param name="sortType">排序类型 1升序 -1降序 仅仅针对该索引</param>
            <returns>返回一个List列表数据</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.Find``1(MongoDB.Driver.IMongoQuery,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            分页查询 指定ObjectId最后项-PageSize模式 
            </summary>
            <typeparam name="T">所需查询的数据的实体类型</typeparam>
            <param name="query">查询的条件 没有可以为null</param>
            <param name="lastObjectId">上一条记录的ObjectId 没有可以为空</param>
            <param name="pageSize">每页尺寸</param>
            <param name="sortType">排序类型 1升序 -1降序 仅仅针对_id</param>
            <param name="collectionName">指定去查询集合的名称</param>
            <returns>返回一个List列表数据</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.Find``1(MongoDB.Driver.IMongoQuery,System.String,System.Int32,System.Int32)">
            <summary>
            分页查询 指定ObjectId最后项-PageSize模式 
            </summary>
            <typeparam name="T">所需查询的数据的实体类型</typeparam>
            <param name="query">查询的条件 没有可以为null</param>
            <param name="lastObjectId">上一条记录的ObjectId 没有可以为空</param>
            <param name="pageSize">每页尺寸</param>
            <param name="sortType">排序类型 1升序 -1降序 仅仅针对_id</param>
            <returns>返回一个List列表数据</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.CreateIndex``1">
            <summary>
            创建索引 
            </summary>
            <typeparam name="T">需要创建索引的实体类型</typeparam>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.GetDataSize``1">
            <summary>
            获取集合的存储大小
            </summary>
            <typeparam name="T">该集合对应的实体类</typeparam>
            <returns>返回一个long型</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.GetDataSize(System.String)">
            <summary>
            获取集合的存储大小
            </summary>
            <param name="collectionName">该集合对应的名称</param>
            <returns>返回一个long型</returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.InitQuery(MongoDB.Driver.IMongoQuery)">
            <summary>
            初始化查询记录 主要当该查询条件为空时 会附加一个恒真的查询条件，防止空查询报错
            </summary>
            <param name="query">查询的条件</param>
            <returns></returns>
        </member>
        <member name="M:DawnXZ.DBUtility.MongoDBHelperAt.InitSortBy(MongoDB.Driver.SortByDocument)">
            <summary>
            初始化排序条件  主要当条件为空时 会默认以ObjectId递增的一个排序
            </summary>
            <param name="sortBy"></param>
            <returns></returns>
        </member>
    </members>
</doc>
